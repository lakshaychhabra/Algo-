#include <bits/stdc++.h>
using namespace std;
class Graphs{
    map<int,list<int>> adjList;

public: 
    void addEdge(int u, int v,bool isBidirectional = true){
        adjList[u].push_back(v);
        if(isBidirectional){
            adjList[v].push_back(u);
        }
    }

    bool detectcycle(int src){
        map<int,bool> visited;
        map<int,int> parent; 
        queue<int> q;
        q.push(src);
        visited[src] = true;
        parent[src] = src;

        while(!q.empty()){
            int node = q.front();
            q.pop();

            for(auto neighbour : adjList[node]){
            if(visited[neighbour] && parent[node] != neighbour ){
                return true;
            }
            else if(!visited[neighbour]){
                q.push(neighbour);
                visited[neighbour] = true;
                parent[neighbour] = node;
            }

            }
        }
        return false;
    }

   

};
int main() {
    Graphs g;
    g.addEdge(0,1);
    g.addEdge(0,4);
    //g.addEdge(2,4);
    g.addEdge(2,1);
    //g.addEdge(2,3);
    g.addEdge(4,3);
    g.addEdge(3,5);

    if(g.detectcycle(0)){
        cout<<"Its a cyclic Graph";
    }
    else{
        cout<<"Not Cyclic";
    }
   // g.dfs(0);

}
